/*
 *             Copyright (c) 2016 - 2020, CKSource - Frederico Knabben. All rights reserved.
 *
 *
 *
 *
 *          +---------------------------------------------------------------------------------+
 *          |                                                                                 |
 *          |                                 Hello stranger!                                 |
 *          |                                                                                 |
 *          |                                                                                 |
 *          |   What you're currently looking at is the source code of a legally protected,   |
 *          |    proprietary software. Any attempts to deobfuscate / disassemble this code    |
 *          |               are forbidden and will result in legal consequences.              |
 *          |                                                                                 |
 *          |                                                                                 |
 *          +---------------------------------------------------------------------------------+
 *
 *
 *
 *
 */
import{Decoder as _0x11cada,Encoder as _0xf1a177}from'socket.io-parser';import PacketParser from'./packetparser';import ParserUtils from'./parserutils';const ENCODED_TYPES=[0x2,0x3,0x6,0x5];export class Encoder extends _0xf1a177{constructor(packetParser=new PacketParser()){super(),this['_packetParser']=packetParser;}['encode'](packet,_0x92ed7d){if(ENCODED_TYPES['includes'](packet['type'])){let options=packet['data']&&Array['isArray'](packet['data'])&&packet['data']['pop']();if(options&&!0x0!==options['_cs']&&(packet['data']['push'](options),options=null),!options||options&&!0x0!==options['originalParser'])try{return _0x92ed7d([this['_packetParser']['encode'](packet['type'],packet['data'],packet['id'],packet['nsp'])]);}catch(_0x9eb32d){}}return super['encode'](packet,_0x92ed7d);}}export class Decoder extends _0x11cada{constructor(packetParser=new PacketParser()){super(),this['_packetParser']=packetParser;}['add'](_0x2e6549){if(!ParserUtils['isBuffer'](_0x2e6549))return super['add'](_0x2e6549);let packet;try{packet=this['_packetParser']['decode'](_0x2e6549)['packet'];}catch(_0x444b8d){return super['add'](_0x2e6549);}this['emit']('decoded',packet);}}